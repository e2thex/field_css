<?php
/**
 * @file
 * This file implements the field_css field
 */

/**
 * Implements hook_field_info().
 *
 */
function field_css_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_css_field' => array(
      'label' => t('CSS'),
      'description' => t('Allow limited css markup'),
      'default_widget' => 'field_css_structured_widget',
      'default_formatter' => 'field_css_style_tag_formatter',
    ),
  );
}

/**
 * helper function to post process data for save
 * remove white spaces, { and } from style
 *
 * it also post converts feeform widgets fields into the structured data fields
 */
function field_css_post_process($widget_type, $items) {
  switch ($widget_type) {
    case "field_css_freeform_widget":
      $new_items = array();
      foreach($items as &$item) {
        $new_items = array_merge($new_items, field_css_parse_freeform($item['style']));
      }
      $items = $new_items;
    break;
    case 'field_css_structured_widget':
    break;
  }
  foreach($items as &$item) {
    $item['style'] = trim($item['style'], "{} \t\n\r\0\x0B");
    $item['selector'] = trim($item['selector']);
  }
  return $items;
}

/**
 * helper function to turn normal css in to our structured format
 *
 * maybe we should be using something like https://github.com/sabberworm/PHP-CSS-Parser
 */
function field_css_parse_freeform($css) {
  $items = array();
  $decls = explode("}",$css);
  foreach($decls as $decl) {
    if(strpos($decl,"{") !== false) {
      list($selector, $style) = explode("{", $decl);
      if(!empty($style)) {
        $items[] = array("selector"=>trim($selector), "style" => trim($style));
      }
    }
  }
  return $items;
}


/**
 * Implements hook_field_presave()
 */
function field_css_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $items = field_css_post_process($instance['widget']['type'], $items);
}

/**
 * Implements hook_field_validate().
 *
 * @see field_css_field_widget_error()
 */
function field_css_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  //lets test items as if they were going to be saved
  $items = field_css_post_process($instance['widget']['type'], $items);
  foreach ($items as $delta => $item) {
    if (!empty($item['selector'])) {
      if (preg_match('[{}]', $item['selector'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'Selector not valid',
          'message' => t('Selector can not contain { or }.'),
        );
      }
    }
    if (!empty($item['style'])) {
      if (preg_match('[{}]', $item['style'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'Style not valid',
          'message' => t('Style can not contain { or }.'),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 *
 */
function field_css_field_is_empty($item, $field) {
  $style = trim($item['style'], "{} \t\n\r\0\x0B");
  return empty($style);
}

/**
 *Implements hook_field_formatter_info().
 * 
 * @see field_css_field_formatter_view()
 */
function field_css_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'field_css_style_tag_formatter' => array(
      'label' => t('Style Tag'),
      'field types' => array('field_css_field'),
    ),
    'field_css_add_css_formatter' => array(
      'label' => t('Add CSS function'),
      'field types' => array('field_css_field'),
    ),
  );
}


function field_css_parse_field($item, $prefix="") {
  return t("@prefix @selector { \n @style \n}\n", array("@prefix" => $prefix, "@selector" => $item['selector'], "@style" => $item['style']));
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see field_css_field_formatter_info()
 */
function field_css_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $entity_info = entity_get_info($entity_type);
  $prefix = field_css_get_prefix($field, $entity_type, $entity);
  $element = array();
  $css = "";

  foreach ($items as $delta => $item) {
    $css .= field_css_parse_field($item);
  }

  switch ($display['type']) {
    case 'field_css_style_tag_formatter':

      $element[0] = array(
        '#type' => 'html_tag',
        '#tag' => 'style',
        '#value' => $css
      );
    break;
    case 'field_css_add_css_formatter':
      drupal_add_css($css, array("type"=>"inline"));
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see field_css_field_widget_form()
 */
function field_css_field_widget_info() {
  return array(
    'field_css_structured_widget' => array(
      'label' => t('Structured'),
      'field types' => array('field_css_field'),
    ),
    'field_css_freeform_widget' => array(
      'label' => t('Free form'),
      'field types' => array('field_css_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form()
 */

function field_css_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['prefix'] = array(
    '#type' => 'select',
    '#title' => t('Selector Prefix'),
    '#default_value' => $settings['prefix'],
    '#options' => array(
        "none" => "None",
        "entity-item" => "EntityType-Id (e.g. node-4938)"
    ),
    '#required' => FALSE,
    '#description' => t('What selector should prefix all css rules.'),
  );
  return $form;
}
/**
 * helper function to parse setting and generate the wiget
 */
function field_css_get_prefix($field, $entity_type, $entity) {
  $prefix = "";
  $prefix_type = $field['settings']['prefix'];
  switch ($prefix_type) {
    case 'entity-item':
      $entity_info = entity_get_info($entity_type);
      $id = isset($entity->{$entity_info['entity keys']['id']}) ? $entity->{$entity_info['entity keys']['id']} : "###";
      $prefix = ".". $entity_type . "-" . $id;
    break;
    case 'none':
      
  }
  return $prefix;

}

/**
 * Implements hook_field_widget_form().
 */
function field_css_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]) ? $items[$delta] : array("selector"=>"", "style" => "");
  switch ($instance['widget']['type']) {

    case 'field_css_structured_widget':
      $element['selector'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#prefix' => field_css_get_prefix($field, $element['#entity_type'], $element['#entity']),
        '#default_value' => $value['selector'],
        '#attributes' => array('class' => array("field-css-selector", "field-css-wrapped")),
      );
      $element['style'] = array(
        '#type' => 'textarea',
        '#title' => '',
        '#desciption' => "",
        '#default_value' => "{\n". $value['style'] ."\n}",
        '#attributes' => array('class' => array("field-css-style", "field-css-wrapped")),
      );
      $element['#attached']['css'] = array(
        drupal_get_path('module', 'field_css') . '/field_css.admin.css',
      );
      $element['#attributes']['class'][] ="field-css-stff";
    break;
    case 'field_css_freeform_widget':

      if($delta === 0) {
        $css = array_reduce($items, function($c, $i) { return $c . field_css_parse_field($i);}, "");
        $element['style'] = array(
          '#type' => 'textarea',
          '#title' => '',
          '#desciption' => "",
          '#default_value' => array_reduce($items, function($c, $i) { return $c . field_css_parse_field($i);}, ""),
          '#attributes' => array('class' => array("field-css-style", "field-css-wrapped")),
        );
      }
      else {
        return;
      }
  };
  field_css_attach_syntax_highlighting($element['style']);
  return $element;
}

/**
 * helper function to freeform widget
 */
function field_css_freform_widget_build_css($item) {
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_css_field_validate()
 * @see form_error()
 */
function field_css_field_widget_error($element, $error, $form, &$form_state) {
      form_error($element, $error['message']);
}

/**
 * Returns path to CodeMirror, or FALSE if not found.
 *  
 * Thank you to http://www.drupal.org/projects/cpn
 */
function field_css_codemirror() {
  static $path;

  // Only process this once per page load.
  if (is_null($path)) {
    if (module_exists('libraries')) {
      $path = libraries_get_path('codemirror');
    }
    else {
      $path = 'sites/all/libraries/codemirror';
    }
    $path = file_exists($path) && is_dir($path) ? $path : FALSE;
  }

  return $path;
}

/**
 * Attaches syntax highlighting to a form element.
 * Thank you to http://www.drupal.org/projects/cpn
 */
function field_css_attach_syntax_highlighting(&$form) {
  $path = field_css_codemirror();
  if (!empty($path)) {
    $form['#attached']['js'][] = $path . '/lib/codemirror.js';
    $form['#attached']['css'][] = $path . '/lib/codemirror.css';
    $form['#attached']['js'][] = $path . '/mode/css/css.js';
    $form['#attached']['js'][] = drupal_get_path('module', 'field_css') . '/field_css.js';
  }
}

